---
title: "Data Exploration Project ECON 4110"
format: docx
editor: visual
---

```{r}
# import the library will be used 
library(tidyverse)
library(dplyr)
library(lubridate)
library(tidyr)
library(purrr)
library(stringr)
library(fixest)
library(rio)
library(vtable)
```

```{r}
# Getting date data
ggtrend <- list.files(pattern = "trends_up_to_", full.names = TRUE)
# Read in the files and bind them together
dataset <- import_list(ggtrend, rbind = TRUE, fill = TRUE )
```

```{r}
# Aggregating the Google Trends data 
dataset <- dataset %>% 
  mutate(week = str_sub(monthorweek, start = 1, end = 10)) %>% 
  mutate(week = ymd(week)) %>% 
  mutate(month = floor_date(week, unit = "month"))
  
```

```{r}
dataset <- dataset %>%
  group_by(schname, keyword) %>%
  mutate(std_index = (index - mean(index))/sd(index)) 
```

```{r}

# Reading the scorecard data and the id name data 
# Import the scorecard one.
scorecard <- import("Most+Recent+Cohorts+(Scorecard+Elements).csv")
id_name_link <- import("id_name_link.csv")
```

```{r}
# Merge the scorecard data
# First step: count and filter duplicate
id_name_link <- id_name_link %>%
  group_by(schname) %>%
  mutate(n = n()) %>%
  filter(n == 1) # or drop can be fine.

# Second step:  unitid and or opeid columns to link with scorecard data. 
colnames(scorecard)[colnames(scorecard) == "UNITID"] = "unitid"

# Join 2 data together

id_link <- inner_join(id_name_link, scorecard, by ="unitid")
gg_link <-inner_join(dataset, id_link, by ="schname")

```

```{r}
export(gg_link, "finaldata.csv")
```

```{r}
data_to_work <- import("finaldata.csv")
```

## The analysis

```{r}
# Filter by the college == "3" since PREDEG is=3 in The scorecard dicitonary 
# mean that Predominatly bachelor - degree granting. 
merged_data_bachelors <- data_to_work %>%
  filter(PREDDEG == 3)

# Filter by the college == "3" since PREDEG is=3 in The scorecard dictionary
merged_data_bachelors <- subset(data_to_work, PREDDEG == 3)

week <- merged_data_bachelors %>%
  group_by(schname, monthorweek) %>%
  mutate(week_index = mean(index, na.rm = TRUE)) %>%
  filter(!is.na(week_index))

```

```{r}
# make sure the column is numeric
merged_data_bachelors$`md_earn_wne_p10-REPORTED-EARNINGS` <- as.numeric(as.character(merged_data_bachelors$`md_earn_wne_p10-REPORTED-EARNINGS`))

# Calculate mean, standard deviation
income.mean <- mean(na.omit(merged_data_bachelors$`md_earn_wne_p10-REPORTED-EARNINGS`))
income.sd <- sd(na.omit(merged_data_bachelors$`md_earn_wne_p10-REPORTED-EARNINGS`))
income.high <- income.mean + income.sd
income.low <- income.mean - income.sd

# Create binary variable for High/Low income
merged_data_bachelors <- merged_data_bachelors %>%
  mutate(Earnings = ifelse(`md_earn_wne_p10-REPORTED-EARNINGS` >= income.mean, "High", "Low"))

# Categorize incomes into High, Middle, and Low
merged_data_bachelors <- merged_data_bachelors %>%
  mutate(treated = case_when(
    `md_earn_wne_p10-REPORTED-EARNINGS` >= income.high ~ "High",
    `md_earn_wne_p10-REPORTED-EARNINGS` <= income.low ~ "Low",
    TRUE ~ "Middle Income" # this covers all other cases
  ))
```

```{r}
# create table to store variable that we will use 
merged_data_bachelors_rec <- merged_data_bachelors %>%
  select(unitid, schname, keyword, week, `md_earn_wne_p10-REPORTED-EARNINGS`, Earnings, std_index)
```

```{r}
# Remove all of the missing values
merged_data_bachelors_rec <- drop_na(merged_data_bachelors_rec)
```

```{r}
merged_data_bachelors_rec <- merged_data_bachelors_rec %>% 
  mutate(treated = `md_earn_wne_p10-REPORTED-EARNINGS` >= income.high, post_treatment = week >= as.Date("2015-09-12"))

```

```{r}
#Build regression models
# 1 regression 
reg <- feols(std_index ~treated* post_treatment, data = merged_data_bachelors_rec)
etable(reg)
```

```{r}
#Dual line plot using un-dummy variable
# One graph
ggplot(merged_data_bachelors_rec, aes(week, std_index, color = Earnings)) +
  stat_summary(geom = 'line') +
  labs(title = 'Search index between high and low earning universities post- and pre-treatment', x = 'Year', y = 'Standardized Index') +
  geom_vline(xintercept = as.Date ("2015-09-12")) +
  theme_minimal() + theme(legend.position = "bottom")
```

